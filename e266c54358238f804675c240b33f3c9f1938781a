{
  "comments": [
    {
      "key": {
        "uuid": "b7e56a53_e3be557d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-23T16:28:11Z",
      "side": 1,
      "message": "Can you include the performance improvements metrics you\u0027ve observed?\nE.g. scenario \u003d Gerrit Code Review repo\nbefore: 60s, after: 30s",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 9
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9c9c410_91dd291c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-04-24T10:06:23Z",
      "side": 1,
      "message": "Sure, I have run some more benchmark this morning, I\u0027ll update the commit message",
      "parentUuid": "b7e56a53_e3be557d",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 9
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6f47271_107ac13c",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/Contributors.scala",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-23T16:28:11Z",
      "side": 1,
      "message": "This is the default anyway: why bothering instantiating it again?",
      "range": {
        "startLine": 168,
        "startChar": 104,
        "endLine": 168,
        "endChar": 139
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7226a528_83e22650",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/Contributors.scala",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-04-24T10:06:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6f47271_107ac13c",
      "range": {
        "startLine": 168,
        "startChar": 104,
        "endLine": 168,
        "endChar": 139
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3bd67dd_6a595028",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/common/CacheApi.scala",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-23T16:28:11Z",
      "side": 1,
      "message": "The Android Open Source Project",
      "range": {
        "startLine": 1,
        "startChar": 22,
        "endLine": 1,
        "endChar": 37
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6b3f3e4_b4c01d41",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/common/CacheApi.scala",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-04-24T10:06:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3bd67dd_6a595028",
      "range": {
        "startLine": 1,
        "startChar": 22,
        "endLine": 1,
        "endChar": 37
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e620aeb_269cadec",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/common/CacheApi.scala",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-23T16:31:02Z",
      "side": 1,
      "message": "This isn\u0027t properly a cache and may grow indefinitely. Why not using a real cache instead?",
      "range": {
        "startLine": 25,
        "startChar": 22,
        "endLine": 25,
        "endChar": 79
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c9fd896_f6383431",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/common/CacheApi.scala",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-04-24T10:06:23Z",
      "side": 1,
      "message": "You hit a quite interesting point here, I think is worth discussing.\n\nThe lifespan of these cache objects is quite brief, as it lasts only for the duration of one request. Within the timeframe of one request, the cache can grow indefinitely, agreed.\nHowever, in practice, it is really bound to the maximum number of git objects that can be processed, which also cannot be boundless, or too large, otherwise, the http request would never terminate.\n\nAdditionally, if we were to use a real cache, what eviction mechanism would we adopt?\n\n- LRU doesn\u0027t seem useful here, because the cache gets populated and then destroyed very quickly and the concept of \"recent\" doesn\u0027t really apply here.\n\n- Capping the cache to a specific size would open the problem of fine-tuning it:  Different repos, different time-frames, and different extraction parameters would have different requirements. So it would be difficult to find a one-size-fits-all number for this.\n\n\nThe intent of this cache is to avoid to perform the same operation (that would lead to the same result) over and over again: perhaps instead of CacheApi, MemoizationApi would be a better name?\n\nWhat do you think?",
      "parentUuid": "1e620aeb_269cadec",
      "range": {
        "startLine": 25,
        "startChar": 22,
        "endLine": 25,
        "endChar": 79
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a12e2991_f0060d62",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/common/CacheApi.scala",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-25T20:31:28Z",
      "side": 1,
      "message": "\u003e You hit a quite interesting point here, I think is worth discussing.\n\u003e \n\u003e The lifespan of these cache objects is quite brief, as it lasts only for the duration of one request. Within the timeframe of one request, the cache can grow indefinitely, agreed.\n\u003e However, in practice, it is really bound to the maximum number of git objects that can be processed, which also cannot be boundless, or too large, otherwise, the http request would never terminate.\n\u003e \n\u003e Additionally, if we were to use a real cache, what eviction mechanism would we adopt?\n\u003e \n\u003e - LRU doesn\u0027t seem useful here, because the cache gets populated and then destroyed very quickly and the concept of \"recent\" doesn\u0027t really apply here.\n\u003e \n\u003e - Capping the cache to a specific size would open the problem of fine-tuning it:  Different repos, different time-frames, and different extraction parameters would have different requirements. So it would be difficult to find a one-size-fits-all number for this.\n\u003e \n\u003e \n\u003e The intent of this cache is to avoid to perform the same operation (that would lead to the same result) over and over again: perhaps instead of CacheApi, MemoizationApi would be a better name?\n\u003e \n\u003e What do you think?\n\nWhy not just using a Guava cache? Have you thought about it?\nYou would inherit a couple of features:\n\n- Being configurable on gerrit.config\n- Using both in-memory and persistent store\n\nSpecifically, the persistent store would be *really* useful because we could easily end up saving a lot of time rebuilding across runs.",
      "parentUuid": "2c9fd896_f6383431",
      "range": {
        "startLine": 25,
        "startChar": 22,
        "endLine": 25,
        "endChar": 79
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efaa7f87_a0605b7c",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/common/CacheApi.scala",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-04-26T08:51:33Z",
      "side": 1,
      "message": "oh yes, interesting point, that\u0027d be useful indeed!\nI\u0027ll try out that implementation and run some more benchmarks",
      "parentUuid": "a12e2991_f0060d62",
      "range": {
        "startLine": 25,
        "startChar": 22,
        "endLine": 25,
        "endChar": 79
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf1be483_675b5685",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/common/CommitsStatistics.scala",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-23T16:28:11Z",
      "side": 1,
      "message": "Is this related to performance improvement? or just a bug fix of a problem you saw in the meantime?",
      "range": {
        "startLine": 143,
        "startChar": 8,
        "endLine": 143,
        "endChar": 24
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2feb222_e75a7664",
        "filename": "src/main/scala/com/googlesource/gerrit/plugins/analytics/common/CommitsStatistics.scala",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-04-24T10:06:23Z",
      "side": 1,
      "message": "oh yeah, I thought about including this as part of this change as it participates to improve the performance:\n\nGetting a context (i.e. lines before and after a changed line) is useless when you don\u0027t show that diff to somebody, which we don\u0027t do via the analytics plugin.\n\nDiffFormatter sets that context to 3 by default: I am explicitly setting this to 0 so that there\u0027s no need to read extra lines and store them in memory.",
      "parentUuid": "cf1be483_675b5685",
      "range": {
        "startLine": 143,
        "startChar": 8,
        "endLine": 143,
        "endChar": 24
      },
      "revId": "e266c54358238f804675c240b33f3c9f1938781a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}